# Salar Rahmanian - .zshrc file
#
# Custom Completion Funcs
fpath+=~/.zfunc

# zplug
if [[ ! -d ~/.zplug ]]; then
  git clone https://github.com/zplug/zplug ~/.zplug
  source ~/.zplug/init.zsh && zplug update --self
fi

source ~/.zplug/init.zsh

DEFAULT_USER=salar.rahmanian
ZSH_THEME=dracula

zplug "zplug/zplug"
zplug denysdovhan/spaceship-zsh-theme, use:spaceship.zsh, from:github, as:theme
zplug "modules/git", from:prezto 
zplug "modules/history", from:prezto 
zplug "modules/ssh", from:prezto 
zplug "modules/terminal", from:prezto 
zplug "modules/homebrew", from:prezto 
zplug "modules/python", from:prezto 
zplug "modules/node", from:prezto 
zplug "lukechilds/zsh-better-npm-completion", defer:2
zplug "zsh-users/zsh-completions"
zplug "zsh-users/zsh-autosuggestions"
if zplug check zsh-users/zsh-autosuggestions; then
  ZSH_AUTOSUGGEST_CLEAR_WIDGETS+=(history-substring-search-up history-substring-search-down) # Add history-substring-search-* widgets to list of widgets that clear the autosuggestion
  ZSH_AUTOSUGGEST_CLEAR_WIDGETS=("${(@)ZSH_AUTOSUGGEST_CLEAR_WIDGETS:#(up|down)-line-or-history}") # Remove *-line-or-history widgets from list of widgets that clear the autosuggestion to avoid conflict with history-substring-search-* widgets
fi
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-history-substring-search"
if zplug check zsh-users/zsh-history-substring-search; then
  zmodload zsh/terminfo
  bindkey "$terminfo[cuu1]" history-substring-search-up
  bindkey "$terminfo[cud1]" history-substring-search-down
fi
zplug "b4b4r07/enhancd", use:init.sh
zplug "lukechilds/zsh-nvm"
zplug "supercrabtree/k"

if ! zplug check --verbose; then
    printf "Install? [y/N]: "
    if read -q; then
        echo; zplug install
    fi
fi

zplug load 

# General
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export TERM=xterm-256color

# vim / Neovim
alias vim="nvim"
export PATH=~/notes:$PATH
alias notes="cd ~/notes; fuz"
alias nvimi="nvim +PlugInstall +UpdateRemotePlugins +qa"
alias nvimu="nvim +PlugUpgrade +PlugUpdate +UpdateRemotePlugins +qa"
export EDITOR=nvim

# Use CTAGS version installed via brew instead of xcode (used by vim plugin)
export CTAGS=/usr/local/bin
export PATH=$CTAGS:$PATH

# FZF and ripgrep
# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

# Go Lang
export GOPATH=$HOME/goprojects
export PATH=$PATH:$GOPATH/bin

# Rust Lang
export RUST_SRC_PATH=$(rustc --print sysroot)/lib/rustlib/src/rust/src/

# Python
export CFLAGS="-I$(xcrun --show-sdk-path)/usr/include"
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

# Java
export JAVA_HOME=$(/usr/libexec/java_home)

# Scala
export SCALA_HOME=/usr/local/opt/scala/idea
export PATH=$PATH:$SCALA_HOME/bin:~/.dotfiles/bin
export BROWSER="firefox %s"

# C#
export PATH=$PATH:/usr/local/share/dotnet

# aliases 
alias dc="docker-compose"
alias dm="docker-machine"
alias kb="kubectl"
alias kp="kops"
alias mk="minikube"
alias kbc="kubectl config current-context"
alias kbmini="kubectl config use-context minikube"
alias kbpod="kubectl get pods"
alias pj='python -m json.tool'

# Shell improvements
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
source <(kubectl completion zsh)

# Logbook
function lb() {
    vim ~/logbook/$(date '+%Y-%m-%d').md
}

# k8
minikube status | grep -a "Stopped" &> /dev/null
if [ $? -ne 0 ]; then
    eval $(minikube docker-env)
else
    echo "minikube not running"
fi

[[ -f ~/.zshrc.local ]] && . ~/.zshrc.local
